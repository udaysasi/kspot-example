"use strict";

const URL = require("../config/urls");

class HumanImages {
    constructor(options) {
      this.apiClient = options.apiClient;
    }
  
    deleteEntityUpload(callback) {
      return this.apiClient._deleteRequest(URL.HUMAN_IMAGES.ENTITY_UPLOAD, callback);
    }
  
    getEntityUpload(callback) {
      return this.apiClient._getRequest(URL.HUMAN_IMAGES.ENTITY_UPLOAD, callback);
    }
  
    headEntityUpload(callback) {
      return this.apiClient._headRequest(URL.HUMAN_IMAGES.ENTITY_UPLOAD, callback);
    }
  
    patchEntityUpload(callback) {
      return this.apiClient._patchRequest(URL.HUMAN_IMAGES.ENTITY_UPLOAD, callback);
    }
  
    postEntityUpload(callback) {
      return this.apiClient._postRequest(URL.HUMAN_IMAGES.ENTITY_UPLOAD, callback);
    }
  
    deleteEntityUploadWithWildcard(callback) {
      return this.apiClient._deleteRequest(URL.HUMAN_IMAGES.ENTITY_UPLOAD_SEARCH, callback);
    }
  
    getEntityUploadWithWildcard(callback) {
      return this.apiClient._getRequest(URL.HUMAN_IMAGES.ENTITY_UPLOAD_SEARCH, callback);
    }
  
    headEntityUploadWithWildcard(callback) {
      return this.apiClient._headRequest(URL.HUMAN_IMAGES.ENTITY_UPLOAD_SEARCH, callback);
    }
  
    patchEntityUploadWithWildcard(callback) {
      return this.apiClient._patchRequest(URL.HUMAN_IMAGES.ENTITY_UPLOAD_SEARCH, callback);
    }
  
    postEntityUploadWithWildcard(callback) {
      return this.apiClient._postRequest(URL.HUMAN_IMAGES.ENTITY_UPLOAD_SEARCH, callback);
    }
  
    postRegistration(callback) {
      return this.apiClient._postRequest(URL.HUMAN_IMAGES.TUS_UPLOAD_REGISTRATION, callback);
    }
  
    postSearch(callback) {
      return this.apiClient._postRequest(URL.HUMAN_IMAGES.ENTITY_UPLOAD_SEARCH, callback);
    }
  
    postSearchByCamera(callback) {
      return this.apiClient._postRequest(URL.HUMAN_IMAGES.ENTITY_UPLOAD_SEARCH_BY_CAMERA, callback);
    }
  }

module.exports = HumanImages;
  
  