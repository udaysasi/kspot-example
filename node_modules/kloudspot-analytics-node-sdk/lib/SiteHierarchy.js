'use strict';

const URL = require('../config/urls');

class SiteHierarchy {

	constructor(options) {
		this.apiClient = options.apiClient;
		//console.log('Hierarchy object created -> ', this.apiClient.getToken());
	}

	sites(callback) {
		//console.log('Calling sites API with token : ', this.apiClient.getToken());
	    return this.apiClient._getRequest(URL.HIERARCHY.SITES, callback);
	}

	getLocations(callback) {
		//console.log('Calling sites API with token : ', this.apiClient.getToken());
	    return this.apiClient._getRequest(URL.HIERARCHY.LOCATIONS, callback);
	}

	saveLocation(options, callback) {
const baseOptions = [{
			"capacity": 0,
			"type": "region"
           }];
	 
		  const updatedOptions = Object.assign(baseOptions, options);
	    return this.apiClient._postRequest(URL.HIERARCHY.ADD, updatedOptions, callback);
	}

	addUpdateAccessPoint(options,callback){
		return this.apiClient._postRequest(URL.HIERARCHY.ACCESSPOINT, options,callback)
	}
	
	unsetMonitoring(callback){
		return this.apiClient._postRequest(URL.HIERARCHY.MONITORINGOFF,null,callback);
	}

    setMonitoring(callback){
		return this.apiClient._postRequest(URL.HIERARCHY.MONITORINGON,null,callback);
	}

	unsetMonitoringId(id,callback){
		const formattedUrl = URL.HIERARCHY.MONITORINGOFFID.replace('{id}', id);
		
		return this.apiClient._postRequest(formattedUrl,null,callback);
	}
    setMonitoringId(id,callback){
		const formattedUrl = URL.HIERARCHY.MONITORINGONID.replace('{id}', id);
		return this.apiClient._postRequest(formattedUrl,null,callback);
	}

	getShortestPath(options,callback){
		return this.apiClient._postRequest(URL.HIERARCHY.SHORTESTPATH,options,callback)
	}
	
	uploadLocations(file){
		return this.apiClient._postRequest(URL.HIERARCHY.UPLOAD,file,callback)
	}

	uploadSiteCSV(siteId,csv,callback){
		const formattedUrl = URL.HIERARCHY.LOCATIONBYIDCSV.replace('{id}',siteId);
		return this.apiClient._postRequest(formattedUrl,csv,callback);
	}

	getAllTags(callback) {
		return this.apiClient._getRequest(URL.HIERARCHY.ALLTAGS, callback);
	}

	getCsvUploadSample(callback){
		return this.apiClient._getRequest(URL.HIERARCHY.CSVUPLOADSAMPLE, callback);
	}

	getAllFloors(callback){
		return this.apiClient._getRequest(URL.HIERARCHY.FLOORS , callback);	
	}

	getAllFloors(callback){
		return this.apiClient._getRequest(URL.HIERARCHY.FLOORS , callback);	
	}

	getGroupTagsForInfospot(infospotId, callback){
		return this.apiClient._getRequest(URL.HIERARCHY.GROUPTAGINFOSPOTID+infospotId , callback);	
	}

	getGroupTagsForLocation(locationId, callback){
		return this.apiClient._getRequest(URL.HIERARCHY.GROUPTAGLOCATIONID+locationId , callback);	
	}
	getLocationHeirary(callback){
		return this.apiClient._getRequest(URL.HIERARCHY.LOCATIONHIERARHCY , callback);	
	}

	getZoneByInfospotId(infospotId,callback){
		const formattedUrl = URL.HIERARCHY.INFOSPOTSINZONES.replace('{id}', infospotId);
		return this.apiClient._getRequest(formattedUrl , callback);	
	}

	getZoneByInfospotId(infospotId,callback){
		const formattedUrl = URL.HIERARCHY.INFOSPOTSINZONES.replace('{id}', infospotId);
		return this.apiClient._getRequest(formattedUrl , callback);	
	}

	getInfospotsFromLogin(login,callback){
		return this.apiClient._getRequest(URL.HIERARCHY.INFOSPOTSBYLOGIN+login , callback);	
	}

	updateLocation(options,callback){
		const formattedUrl = URL.HIERARCHY.UPDATECHILD.replace('{id}', infospotId);
		return this.apiClient._putRequest(formattedUrl,options,callback);
	}

	deleteLocations(locationId,callback){
		const formattedUrl = URL.HIERARCHY.DELETE.replace('{id}', locationId);
		return this.apiClient._deleteRequest(formattedUrl,callback);
	}
	getLocationSummary(callback){
		return this.apiClient._getRequest(URL.HIERARCHY.LOCATIONSUMMARY, callback);
	}

	getMiniHierarchy(callback){
		return this.apiClient._getRequest(URL.HIERARCHY.MINIHIERARCHY, callback);
	}

	getMyInfospots(callback){
		return this.apiClient._getRequest(URL.HIERARCHY.MYINFOSPOTS, callback);
	}

	getNonLeaves(callback){
		return this.apiClient._getRequest(URL.HIERARCHY.NONLEAVES, callback);
	}

	getNonLeavesSummary(callback){
		return this.apiClient._getRequest(URL.HIERARCHY.NONLEAVESSUMMARY, callback);
	}

	getBreadCrumbs(locationId,callback){
		const formattedUrl = URL.HIERARCHY.BREADCRUMBS.replace('{id}', locationId);
		return this.apiClient._getRequest(formattedUrl, callback);
	}

	getSiteCsv(locationId,callback){
		const formattedUrl = URL.HIERARCHY.LOCATIONBYIDCSV.replace('{id}', locationId);
		return this.apiClient._getRequest(formattedUrl, callback);
	}

	getSiteById(locationId,callback){
		const formattedUrl = URL.HIERARCHY.SITEBYID.replace('{id}',locationId);
		return this.apiClient._getRequest(formattedUrl,callback);
	}

	getSiteForLocation(locationId,callback){
		const formattedUrl = URL.HIERARCHY.SITESBYID.replace('{id}',locationId);
		return this.apiClient._getRequest(formattedUrl, callback);
	}

	getSiteSummaryForLocation(locationId,callback){
		const formattedUrl = URL.HIERARCHY.SITESBYID.replace('{id}',locationId);
		return this.apiClient._getRequest(formattedUrl, callback);
	}

	getZonesForSite(siteId,callback){
		const formattedUrl = URL.HIERARCHY.ZONEBYID.replace('{id}',siteId);
		return this.apiClient._getRequest(formattedUrl,callback);
	}

	getZoneSummaryForSite(siteId,callback){
		const formattedUrl = URL.HIERARCHY.ZONESBYID.replace('{id}',siteId);
		return this.apiClient._getRequest(formattedUrl,callback);
	}

}

module.exports = SiteHierarchy;
