"use strict";

const URL = require("../config/urls");

class BookingResource {
    // POST /api/v1/booking
    postBooking(options, callback) {
      return this.apiClient._postRequest(URL.BOOKING.BOOKING, options, callback);
    }
  
    // POST /api/v1/booking/checkout
    postBookingCheckout(options, callback) {
      return this.apiClient._postRequest(URL.BOOKING.BOOKING_CHECKOUT, options, callback);
    }
  
    // POST /api/v1/booking/claim
    postBookingClaim(options, callback) {
      return this.apiClient._postRequest(URL.BOOKING.BOOKING_CLAIM, options, callback);
    }
  
    // POST /api/v1/booking/current
    postBookingCurrent(options, callback) {
      return this.apiClient._postRequest(URL.BOOKING.BOOKING_CURRENT, options, callback);
    }
  
    // POST /api/v1/booking/delegated
    postBookingDelegated(options, callback) {
      return this.apiClient._postRequest(URL.BOOKING.BOOKING_DELEGATED, options, callback);
    }
  
    // GET /api/v1/booking/delegatee
    getBookingDelegatee(callback) {
      return this.apiClient._getRequest(URL.BOOKING.BOOKING_DELEGATEE, callback);
    }
  
    // POST /api/v1/booking/delegatee/modify
    postBookingDelegateeModify(options, callback) {
      return this.apiClient._postRequest(URL.BOOKING.BOOKING_DELEGATEE_MODIFY, options, callback);
    }
  
    // GET /api/v1/booking/delegatee/pageable
    getBookingDelegateePageable(callback) {
      return this.apiClient._getRequest(URL.BOOKING.BOOKING_DELEGATEE_PAGEABLE, callback);
    }
  
    // DELETE /api/v1/booking/deleteFuture/{id}/{subid}
    deleteBookingDeleteFuture(id, subid, callback) {
      const formattedUrl = URL.BOOKING.BOOKING_DELETE_FUTURE.replace('{id}', id).replace('{subid}', subid);
      return this.apiClient._deleteRequest(formattedUrl, callback);
    }
  
    // POST /api/v1/booking/directreports
    postBookingDirectReports(options, callback) {
      return this.apiClient._postRequest(URL.BOOKING.BOOKING_DIRECT_REPORTS, options, callback);
    }
  
    // POST /api/v1/booking/extend
    postBookingExtend(options, callback) {
      return this.apiClient._postRequest(URL.BOOKING.BOOKING_EXTEND, options, callback);
    }
  
    // GET /api/v1/booking/infospot/{infospotId}
    getBookingInfospot(infospotId, callback) {
      const formattedUrl = URL.BOOKING.BOOKING_INFOSPOT.replace('{infospotId}', infospotId);
      return this.apiClient._getRequest(formattedUrl, callback);
    }
  
    // POST /api/v1/booking/issue
    postBookingIssue(options, callback) {
      return this.apiClient._postRequest(URL.BOOKING.BOOKING_ISSUE, options, callback);
    }
  
    // POST /api/v1/booking/location/{id}
    postBookingLocation(id, options, callback) {
      const formattedUrl = URL.BOOKING.BOOKING_LOCATION.replace('{id}', id);
      return this.apiClient._postRequest(formattedUrl, options, callback);
    }
  
    // POST /api/v1/booking/modify
    postBookingModify(options, callback) {
      return this.apiClient._postRequest(URL.BOOKING.BOOKING_MODIFY, options, callback);
    }
  
    // GET /api/v1/booking/re-enable
    getBookingReEnable(callback) {
      return this.apiClient._getRequest(URL.BOOKING.BOOKING_RE_ENABLE, callback);
    }
  
    // POST /api/v1/booking/share
    postBookingShare(options, callback) {
      return this.apiClient._postRequest(URL.BOOKING.BOOKING_SHARE, options, callback);
    }
  
    // GET /api/v1/booking/user/pageable/{login}
    getBookingUserPageable(login, callback) {
      const formattedUrl = URL.BOOKING.BOOKING_USER_PAGEABLE.replace('{login}', login);
      return this.apiClient._getRequest(formattedUrl, callback);
    }
  
    // GET /api/v1/booking/user/{login}
    getBookingUser(login, callback) {
      const formattedUrl = URL.BOOKING.BOOKING_USER.replace('{login}', login);
      return this.apiClient._getRequest(formattedUrl, callback);
    }
  
    // POST /api/v1/booking/usercircle
    postBookingUserCircle(options, callback) {
      return this.apiClient._postRequest(URL.BOOKING.BOOKING_USER_CIRCLE, options, callback);
    }
  
    // GET /api/v1/booking/zone/{id}
    getBookingZone(id, callback) {
      const formattedUrl = URL.BOOKING.BOOKING_ZONE.replace('{id}', id);
      return this.apiClient._getRequest(formattedUrl, callback);
    }
  
    // DELETE /api/v1/booking/{id}
    deleteBookingById(id, callback) {
      const formattedUrl = URL.BOOKING.BOOKING_BY_ID.replace('{id}', id);
      return this.apiClient._deleteRequest(formattedUrl, callback);
    }
  
    // GET /api/v1/booking/{id}
    getBookingById(id, callback) {
      const formattedUrl = URL.BOOKING.BOOKING_BY_ID.replace('{id}', id);
      return this.apiClient._getRequest(formattedUrl, callback);
    }
  
    // DELETE /api/v1/booking/{id}/{subid}
    deleteBookingByIdSubid(id, subid, callback) {
      const formattedUrl = URL.BOOKING.BOOKING_BY_ID_SUBID.replace('{id}', id).replace('{subid}', subid);
      return this.apiClient._deleteRequest(formattedUrl, callback);
    }
  }
  

  module.exports = BookingResource;
  