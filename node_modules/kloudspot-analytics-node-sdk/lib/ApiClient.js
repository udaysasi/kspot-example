'use strict';

const request = require('request');
const URL = require('../config/urls');


class ApiClient {
	constructor(options) {
		this.AUTH_TOKEN = null;
		
		// Merge the default options with the client submitted options
		this.options = Object.assign({
			host: 'https://office.kloudspot.com',
			id: null,
			secretKey: null
		}, options);
		
		this.login((resp) => {
			//console.log('Logged in with token : '+resp);
			this.AUTH_TOKEN = resp.token;
			console.log('Initial Login  - Token set to ', that.AUTH_TOKEN);
			
			this.setToken(that.AUTH_TOKEN);
		});

		//Renew the token every 10 minutes
		var that = this;
		setInterval(function() {
			that.login(function(resp) {
				//console.log('Logged in with token : '+resp);
				that.AUTH_TOKEN = resp.token;
				console.log('Token reset to ', that.AUTH_TOKEN);
				
				that.setToken(that.AUTH_TOKEN);
			});
		}, 10 * 60 * 1000);
		
		return this;
	}
	
	setToken(authToken) {
		this.AUTH_TOKEN = authToken;
	}
	
	getToken() {
		return this.AUTH_TOKEN;
	}
	
	login(callback) {
	    var that = this;
	    process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
	    
	    var postData = {
	    		id: this.options.id,
	    		secretKey: this.options.secretKey
		};
	    
	    //console.log('Logging in to '+that.options.host+URL.LOGIN);
	    var options = {
	        url: this.options.host+URL.LOGIN,
	        method: 'POST',
	        body: postData,
	        json: true,
	        headers : {
	        	'Accept': '*/*',
	        	'Content-Type': 'application/json'
	        }
	    };
	
	    if(callback) {
	    	//console.log('callback defined.. logging in..');
		    request(options, function(error, response, body) {
		    	//console.log(body);
		        that.AUTH_TOKEN = body;
		        //console.log('Token generated: '+that.AUTH_TOKEN);
		        if(callback) {
		            return callback({
		                'token': that.AUTH_TOKEN
		            });
		        }
		    });
	    } else {
	    	//console.log('callback NOT defined.. logging in..');
	    	return new Promise(function (resolve, reject) {
			    request(options, function(error, response, body) {
			    	//console.log(body);
			        that.AUTH_TOKEN = body;
			        //console.log('Token generated: '+that.AUTH_TOKEN);
			        resolve({
		                'token': that.AUTH_TOKEN
		            });
			    });
		    });
	    }
	}
	
	/* Generic getRequest method for all GET requests */
	_getRequest = function(url, callback) {
		var that = this;
		if (this.AUTH_TOKEN) {
			//console.log('this.AUTH_TOKEN is NOT NULL');
			if (!callback) {
				//console.log('Returning a promise (1)');
				return new Promise(function(resolve, reject) {

					//console.log('Sending request to '+that.options.host+url);
					var options = {
						url: that.options.host + url,
						method: 'GET',
						headers: {
							'Authorization': 'Bearer ' + that.AUTH_TOKEN,
							'Accept': '*/*',
							'Content-Type': 'application/json'
						}
					};
					request(options, function(error, response, body) {
						var bodyJSON = null;
						try {
							bodyJSON = JSON.parse(body);
						} catch (e) { };
						resolve(bodyJSON);
					});
				});
			} else {
				var options = {
					url: that.options.host + url,
					method: 'GET',
					headers: {
						'Authorization': 'Bearer ' + that.AUTH_TOKEN,
						'Accept': '*/*',
						'Content-Type': 'application/json'
					}
				};
				request(options, function(error, response, body) {
					var bodyJSON = null;
					try {
						bodyJSON = JSON.parse(body);
					} catch (e) { };
					if (callback) {
						callback(bodyJSON);
					}
				});
			}
		} else {
			//console.log('this.AUTH_TOKEN is NULL - Logging In first');
			if (!callback) {
				//console.log('Returning a promise (2)');
				return new Promise(function(resolve, reject) {

					that.login(function() {
						//console.log('Sending request to '+that.options.host+url+ ' using token '+that.AUTH_TOKEN);
						var options = {
							url: that.options.host + url,
							method: 'GET',
							headers: {
								'Authorization': 'Bearer ' + that.AUTH_TOKEN,
								'Accept': '*/*',
								'Content-Type': 'application/json'
							}
						};
						request(options, function(error, response, body) {
							var bodyJSON = null;
							try {
								bodyJSON = JSON.parse(body);
							} catch (e) { };

							resolve(bodyJSON);
						});
					});
				});
			} else {
				that.login(function() {
					//console.log('Sending request to '+that.options.host+url+ ' using token '+that.AUTH_TOKEN);
					var options = {
						url: that.options.host + url,
						method: 'GET',
						headers: {
							'Authorization': 'Bearer ' + that.AUTH_TOKEN,
							'Accept': '*/*',
							'Content-Type': 'application/json'
						}
					};
					request(options, function(error, response, body) {
						var bodyJSON = null;
						try {
							bodyJSON = JSON.parse(body);
						} catch (e) { };

						callback(bodyJSON);
					});
				});
			}
		}
	}
	
	/* Generic postRequest method for all POST requests */
	_postRequest(url, postData, callback) {
	    var that = this;
	    if(this.AUTH_TOKEN) {
	    	if (!callback) {
	    		console.log('Returning a promise (1)');
	    		return new Promise(function(resolve, reject) {
	    			//console.log('Sending request to '+that.options.host+url);
					var options = {
			            url: that.options.host+url,
			            body: JSON.stringify(postData),
			            method: 'POST',
			            headers : {
			            	'Authorization' : 'Bearer '+that.AUTH_TOKEN,
			            	'Accept': '*/*',
			            	'Content-Type': 'application/json'
			            }
			        };
			        request(options, function(error, response, body) {
			            var bodyJSON = null;
						try {
							bodyJSON = JSON.parse(body);
						} catch (e) { };
						resolve(bodyJSON);
			        });    
	    		});
	    	} else {
	    		console.log('Executing post request (1)');
	    		var options = {
		            url: that.options.host+url,
		            body: JSON.stringify(postData),
		            method: 'POST',
		            headers : {
		            	'Authorization' : 'Bearer '+that.AUTH_TOKEN,
		            	'Accept': '*/*',
		            	'Content-Type': 'application/json'
		            }
		        };
		        request(options, function(error, response, body) {
		            var bodyJSON = null;
					try {
						bodyJSON = JSON.parse(body);
					} catch (e) { };
					if (callback) {
						callback(bodyJSON);
					}
		        });    
	    	}
	    } else {
	    	if (!callback) {
	    		console.log('Returning a promise (2)');
	    		return new Promise(function(resolve, reject) {
	    			that.login(function() {        	
			        	//console.log('Sending request to '+that.options.host+url);
			            var options = {
			                url: that.options.host+url,
			                body: JSON.stringify(postData),
			                method: 'POST',
			                headers : {
			                	'Authorization' : 'Bearer '+that.AUTH_TOKEN,
			                	'Accept': '*/*',
			                	'Content-Type': 'application/json'
			                }
			            };
			            request(options, function(error, response, body) {
			            	var bodyJSON = null;
							try {
								bodyJSON = JSON.parse(body);
							} catch (e) { };
							resolve(bodyJSON);
			            });   
			        });
	    		});
	    	} else {
	    		console.log('Executing post request (2)');
	    		that.login(function() {        	
		        	//console.log('Sending request to '+that.options.host+url);
		            var options = {
		                url: that.options.host+url,
		                body: JSON.stringify(postData),
		                method: 'POST',
		                headers : {
		                	'Authorization' : 'Bearer '+that.AUTH_TOKEN,
		                	'Accept': '*/*',
		                	'Content-Type': 'application/json'
		                }
		            };
		            request(options, function(error, response, body) {
		            	var bodyJSON = null;
						try {
							bodyJSON = JSON.parse(body);
						} catch (e) { };
						if (callback) {
							callback(bodyJSON);
						}
		            });   
		        });
	    	}
	    }
	}
	_putRequest(url, putData, callback) {
		var that = this;
		if(this.AUTH_TOKEN) {
			if (!callback) {
				console.log('Returning a promise (1)');
				return new Promise(function(resolve, reject) {
					var options = {
						url: that.options.host + url,
						body: JSON.stringify(putData),
						method: 'PUT',
						headers : {
							'Authorization' : 'Bearer ' + that.AUTH_TOKEN,
							'Accept': '*/*',
							'Content-Type': 'application/json'
						}
					};
					request(options, function(error, response, body) {
						var bodyJSON = null;
						try {
							bodyJSON = JSON.parse(body);
						} catch (e) { };
						resolve(bodyJSON);
					});    
				});
			} else {
				console.log('Executing put request (1)');
				var options = {
					url: that.options.host + url,
					body: JSON.stringify(putData),
					method: 'PUT',
					headers : {
						'Authorization' : 'Bearer ' + that.AUTH_TOKEN,
						'Accept': '*/*',
						'Content-Type': 'application/json'
					}
				};
				request(options, function(error, response, body) {
					var bodyJSON = null;
					try {
						bodyJSON = JSON.parse(body);
					} catch (e) { };
					if (callback) {
						callback(bodyJSON);
					}
				});    
			}
		} else {
			if (!callback) {
				console.log('Returning a promise (2)');
				return new Promise(function(resolve, reject) {
					that.login(function() {         
						var options = {
							url: that.options.host + url,
							body: JSON.stringify(putData),
							method: 'PUT',
							headers : {
								'Authorization' : 'Bearer ' + that.AUTH_TOKEN,
								'Accept': '*/*',
								'Content-Type': 'application/json'
							}
						};
						request.put(options, function(error, response, body) {
							var bodyJSON = null;
							try {
								bodyJSON = JSON.parse(body);
							} catch (e) { };
							resolve(bodyJSON);
						});   
					});
				});
			} else {
				console.log('Executing put request (2)');
				that.login(function() {         
					var options = {
						url: that.options.host + url,
						body: JSON.stringify(putData),
						method: 'PUT',
						headers : {
							'Authorization' : 'Bearer ' + that.AUTH_TOKEN,
							'Accept': '*/*',
							'Content-Type': 'application/json'
						}
					};
					request(options, function(error, response, body) {
						var bodyJSON = null;
						try {
							bodyJSON = JSON.parse(body);
						} catch (e) { };
						if (callback) {
							callback(bodyJSON);
						}
					});   
				});
			}
		}
	}
	_deleteRequest = function(url, callback) {
		var that = this;
		if (this.AUTH_TOKEN) {
			//console.log('this.AUTH_TOKEN is NOT NULL');
			if (!callback) {
				//console.log('Returning a promise (1)');
				return new Promise(function(resolve, reject) {

					//console.log('Sending request to '+that.options.host+url);
					var options = {
						url: that.options.host + url,
						method: 'DELETE',
						headers: {
							'Authorization': 'Bearer ' + that.AUTH_TOKEN,
							'Accept': '*/*',
							'Content-Type': 'application/json'
						}
					};
					request(options, function(error, response, body) {
						var bodyJSON = null;
						try {
							bodyJSON = JSON.parse(body);
						} catch (e) { };
						resolve(bodyJSON);
					});
				});
			} else {
				var options = {
					url: that.options.host + url,
					method: 'DELETE',
					headers: {
						'Authorization': 'Bearer ' + that.AUTH_TOKEN,
						'Accept': '*/*',
						'Content-Type': 'application/json'
					}
				};
				request(options, function(error, response, body) {
					var bodyJSON = null;
					try {
						bodyJSON = JSON.parse(body);
					} catch (e) { };
					if (callback) {
						callback(bodyJSON);
					}
				});
			}
		} else {
			//console.log('this.AUTH_TOKEN is NULL - Logging In first');
			if (!callback) {
				//console.log('Returning a promise (2)');
				return new Promise(function(resolve, reject) {

					that.login(function() {
						//console.log('Sending request to '+that.options.host+url+ ' using token '+that.AUTH_TOKEN);
						var options = {
							url: that.options.host + url,
							method: 'DELETE',
							headers: {
								'Authorization': 'Bearer ' + that.AUTH_TOKEN,
								'Accept': '*/*',
								'Content-Type': 'application/json'
							}
						};
						request(options, function(error, response, body) {
							var bodyJSON = null;
							try {
								bodyJSON = JSON.parse(body);
							} catch (e) { };

							resolve(bodyJSON);
						});
					});
				});
			} else {
				that.login(function() {
					//console.log('Sending request to '+that.options.host+url+ ' using token '+that.AUTH_TOKEN);
					var options = {
						url: that.options.host + url,
						method: 'DELETE',
						headers: {
							'Authorization': 'Bearer ' + that.AUTH_TOKEN,
							'Accept': '*/*',
							'Content-Type': 'application/json'
						}
					};
					request(options, function(error, response, body) {
						var bodyJSON = null;
						try {
							bodyJSON = JSON.parse(body);
						} catch (e) { };

						callback(bodyJSON);
					});
				});
			}
		}
	}
	
	
	
	_getImage(url, callback) {
	    var that = this;
	    if(this.AUTH_TOKEN) {
	    	if(!callback) {
	    		//console.log('Returning a promise (1)');
	        	return new Promise(function (resolve, reject) {
	        		
	        		//console.log('Sending request to '+that.options.host+url);
	        		var options = {
	    	            url: that.options.host+url,
	    	            method: 'GET',
	    	            headers : {
	    	            	'Authorization' : 'Bearer '+that.AUTH_TOKEN,
	    	            	'Accept': '*/*'
	    	            },
						encoding: null
	    	        };
	
	    	        request(options, function(error, response, body) {
						if(response.headers["content-type"]=="application/json") {
							reject(null);
						} else {
							let data = "data:" + response.headers["content-type"] + ";base64," + Buffer.from(body).toString('base64');
							resolve(data);
						}
	    	        });
	        	});
	    	} else {
	    		var options = {
		            url: that.options.host+url,
		            method: 'GET',
		            headers : {
		            	'Authorization' : 'Bearer '+that.AUTH_TOKEN,
		            	'Accept': '*/*'
		            },
		            encoding: null
		        };
		        request(options, function(error, response, body) {
		        	if(response.headers["content-type"]=="application/json") {
						reject(null);
					} else {
			        	let data = "data:" + response.headers["content-type"] + ";base64," + Buffer.from(body).toString('base64');
			            callback(data);
		            }
		        });
	    	}
	         
	    } else {
	    	if(!callback) {
	    		//console.log('Returning a promise (2)');
	        	return new Promise(function (resolve, reject) {
	        		
			        that.login(function() {      	
			        	//console.log('Sending request to '+that.options.host+url+ ' using token '+that.AUTH_TOKEN);
			            var options = {
			                url: that.options.host+url,
			                method: 'GET',
			                headers : {
			                	'Authorization' : 'Bearer '+that.AUTH_TOKEN,
			                	'Accept': '*/*'
			                },
			                encoding: null
			            };            
	            		request(options, function(error, response, body) {
	            			if(response.headers["content-type"]=="application/json") {
								reject(null);
							} else {
		            			let data = "data:" + response.headers["content-type"] + ";base64," + Buffer.from(body).toString('base64');
		                    	resolve(data);
	                    	}
	                    });
	            	});
	            });            
	        } else {
	        	that.login(function() {      	
		        	//console.log('Sending request to '+that.options.host+url+ ' using token '+that.AUTH_TOKEN);
		            var options = {
		                url: that.options.host+url,
		                method: 'GET',
		                headers : {
		                	'Authorization' : 'Bearer '+that.AUTH_TOKEN,
		                	'Accept': '*/*'
		                },
		                encoding: null
		            };            
	        		request(options, function(error, response, body) {
	        			if(response.headers["content-type"]=="application/json") {
							reject(null);
						} else {
		        			let data = "data:" + response.headers["content-type"] + ";base64," + Buffer.from(body).toString('base64');
		                	callback(data);
	                	}
	                });
	        	});
	        }
	    }    
	};

}

module.exports = ApiClient;
