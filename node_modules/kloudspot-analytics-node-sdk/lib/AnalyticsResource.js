"use strict";

const URL = require("../config/urls");

class AnalyticsResource {
  constructor(options) {
    this.apiClient = options.apiClient;
  }

  // POST /api/v1/analytics/clientMovements
  postClientMovements(options, callback) {
    const baseOptions = {
      deviceType: "probe",
      finish: 0,
      site: "",
      objectType: "human",
      start: 0,
    };

    const updatedOptions = Object.assign(baseOptions, options);
    console.log(JSON.stringify(updatedOptions));

    return this.apiClient._postRequest(
      URL.ANALYTICS_QUERY.CLIENT_MOVEMENTS,
      options,
      callback
    );
  }

  // GET /api/v1/analytics/dailyPresence/{mac}
  getDailyPresence(mac, callback) {
    const formattedUrl = URL.ANALYTICS_QUERY.DAILY_PRESENCE.replace(
      "{mac}",
      mac
    );
    return this.apiClient._getRequest(formattedUrl, callback);
  }

  // GET /api/v1/analytics/deviceDemographics
  getDeviceDemographics(callback) {
    return this.apiClient._getRequest(
      URL.ANALYTICS_QUERY.DEVICE_DEMOGRAPHICS,
      callback
    );
  }

  // GET /api/v1/analytics/deviceSearch
  getDeviceSearch(callback) {
    return this.apiClient._getRequest(
      URL.ANALYTICS_QUERY.DEVICE_SEARCH,
      callback
    );
  }

  // GET /api/v1/analytics/devicesForSite
  getDevicesForSite(callback) {
    return this.apiClient._getRequest(
      URL.ANALYTICS_QUERY.DEVICES_FOR_SITE,
      callback
    );
  }

  // POST /api/v1/analytics/distribution
  postDistribution(options, callback) {
    return this.apiClient._postRequest(
      URL.ANALYTICS_QUERY.DISTRIBUTION,
      options,
      callback
    );
  }

  // GET /api/v1/analytics/generic
  getGeneric(callback) {
    return this.apiClient._getRequest(URL.ANALYTICS_QUERY.GENERIC, callback);
  }

  // GET /api/v1/analytics/generic/list
  getGenericList(callback) {
    return this.apiClient._getRequest(
      URL.ANALYTICS_QUERY.GENERIC_LIST,
      callback
    );
  }

  // POST /api/v1/analytics/movementTree
  postMovementTree(options, callback) {
    return this.apiClient._postRequest(
      URL.ANALYTICS_QUERY.MOVEMENT_TREE,
      options,
      callback
    );
  }

  // POST /api/v1/analytics/pairwiseMovement
  postPairwiseMovement(options, callback) {
    return this.apiClient._postRequest(
      URL.ANALYTICS_QUERY.PAIRWISE_MOVEMENT,
      options,
      callback
    );
  }

  // GET /api/v1/analytics/repeatedUsers
  getRepeatedUsers(callback) {
    return this.apiClient._getRequest(
      URL.ANALYTICS_QUERY.REPEATED_USERS,
      callback
    );
  }

  // POST /api/v1/analytics/runQuery
  postRunQuery(options, callback) {
    return this.apiClient._postRequest(
      URL.ANALYTICS_QUERY.RUN_QUERY,
      options,
      callback
    );
  }

  // GET /api/v1/analytics/summary
  getSummary(callback) {
    return this.apiClient._getRequest(URL.ANALYTICS_QUERY.SUMMARY, callback);
  }

  // GET /api/v1/analytics/timeline
  getTimeline(callback) {
    return this.apiClient._getRequest(URL.ANALYTICS_QUERY.TIMELINE, callback);
  }

  // GET /api/v1/analytics/tzinfo
  getTzinfo(callback) {
    return this.apiClient._getRequest(URL.ANALYTICS_QUERY.TZINFO, callback);
  }

  // GET /api/v1/analytics/userdetails
  getUserDetails(callback) {
    return this.apiClient._getRequest(
      URL.ANALYTICS_QUERY.USER_DETAILS,
      callback
    );
  }

  // GET /api/v1/analytics/userdetails/{mac}
  getUserDetailsByMac(mac, callback) {
    const formattedUrl = URL.ANALYTICS_QUERY.USER_DETAILS_BY_MAC.replace(
      "{mac}",
      mac
    );
    return this.apiClient._getRequest(formattedUrl, callback);
  }

  // GET /api/v1/analytics/distribution
  getDistribution(callback) {
    return this.apiClient._getRequest(
      URL.ANALYTICS_QUERY.DISTRIBUTION,
      callback
    );
  }

  // GET /api/v1/analytics/runQuery
  getRunQuery(callback) {
    return this.apiClient._getRequest(URL.ANALYTICS_QUERY.RUN_QUERY, callback);
  }


   buildURL(baseURL, queryParams = {}) {
    const queryString = Object.entries(queryParams)
        .filter(([key, value]) => value !== undefined && value !== null)
        .map(([key, value]) => `${encodeURIComponent(key)}=${encodeURIComponent(value)}`)
        .join('&');

    if (queryString) {
        baseURL += `?${queryString}`;
    }

    return baseURL;
}
}
module.exports = AnalyticsResource;
