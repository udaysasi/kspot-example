"use strict";

const URL = require("../config/urls");

class VisionAnalytics {
  constructor(options) {
    this.apiClient = options.apiClient;
  }

  peopleEntryExit(options, callback) {
    //console.log('Calling dweell API with token : ', this.apiClient.getToken());

    const baseOptions = {
      direction: null,
      finish: 0,
      locations: [],
      objectType: "human",
      start: 0,
    };

    const updatedOptions = Object.assign(baseOptions, options);
    console.log(JSON.stringify(updatedOptions));

    return this.apiClient._postRequest(
      URL.VISION.ENTRY_EXIT,
      updatedOptions,
      callback
    );
  }

  
  analyticsDistribution(options, callback) {
    const baseOptions = {
      // Add specific options for DISTRIBUTION
    };
    const updatedOptions = Object.assign(baseOptions, options);
    console.log(JSON.stringify(updatedOptions));
    return this.apiClient._postRequest(
      URL.VISION.DISTRIBUTION,
      updatedOptions,
      callback
    );
  }
  analyticsDwellDistribution(options, callback) {
    const baseOptions = {
      // Add specific options for DWELL_DISTRIBUTION
    };
    const updatedOptions = Object.assign(baseOptions, options);
    console.log(JSON.stringify(updatedOptions));
    return this.apiClient._postRequest(
      URL.VISION.DWELL_DISTRIBUTION,
      updatedOptions,
      callback
    );
  }
  analyticsEntityDemographics(options, callback) {
    const baseOptions = {
      // Add specific options for ENTITY_DEMOGRAPHICS
    };
    const updatedOptions = Object.assign(baseOptions, options);
    console.log(JSON.stringify(updatedOptions));
    return this.apiClient._postRequest(
      URL.VISION.ENTITY_DEMOGRAPHICS,
      updatedOptions,
      callback
    );
  }

  analyticsMaxDwellTime(options, callback) {
    const baseOptions = {
      // Add specific options for MAX_DWELL_TIME
    };
    const updatedOptions = Object.assign(baseOptions, options);
    console.log(JSON.stringify(updatedOptions));
    return this.apiClient._postRequest(
      URL.VISION.MAX_DWELL_TIME,
      updatedOptions,
      callback
    );
  }
  analyticsMovementTree(options, callback) {
    const baseOptions = {
      // Add specific options for MOVEMENT_TREE
    };
    const updatedOptions = Object.assign(baseOptions, options);
    console.log(JSON.stringify(updatedOptions));
    return this.apiClient._postRequest(
      URL.VISION.MOVEMENT_TREE,
      updatedOptions,
      callback
    );
  }

  analyticsMovements(options, callback) {
    const baseOptions = {
      // Add specific options for MOVEMENTS
    };
    const updatedOptions = Object.assign(baseOptions, options);
    console.log(JSON.stringify(updatedOptions));
    return this.apiClient._postRequest(
      URL.VISION.MOVEMENTS,
      updatedOptions,
      callback
    );
  }

  analyticsPairwiseMovement(options, callback) {
    const baseOptions = {
      // Add specific options for PAIRWISE_MOVEMENT
    };
    const updatedOptions = Object.assign(baseOptions, options);
    console.log(JSON.stringify(updatedOptions));
    return this.apiClient._postRequest(
      URL.VISION.PAIRWISE_MOVEMENT,
      updatedOptions,
      callback
    );
  }
  analyticsDwell(options, callback) {
    const baseOptions = {
      // Add specific options for DWELL
    };
    const updatedOptions = Object.assign(baseOptions, options);
    console.log(JSON.stringify(updatedOptions));
    return this.apiClient._postRequest(URL.VISION.DWELL, updatedOptions, callback);
}
}
module.exports = VisionAnalytics;
