/*

     _      _______ _     _        __ _ _        _                   _                        _      _    
  /\| |/\  |__   __| |   (_)      / _(_) |      (_)                 | |                      | |  /\| |/\ 
  \ ` ' /     | |  | |__  _ ___  | |_ _| | ___   _ ___   _ __   ___ | |_   _   _ ___  ___  __| |  \ ` ' / 
 |_     _|    | |  | '_ \| / __| |  _| | |/ _ \ | / __| | '_ \ / _ \| __| | | | / __|/ _ \/ _` | |_     _|
  / , . \     | |  | | | | \__ \ | | | | |  __/ | \__ \ | | | | (_) | |_  | |_| \__ \  __/ (_| |  / , . \ 
  \/|_|\/     |_|  |_| |_|_|___/ |_| |_|_|\___| |_|___/ |_| |_|\___/ \__|  \__,_|___/\___|\__,_|  \/|_|\/ 
                                                                                                          
                                                                                                          
*/


var exports = module.exports = {};

//Package version
var VERSION = require('../package.json').version;
const moment = require('moment');
const URL = require('../config/urls');

var request = require('request');

function ANALYTICS(options) {

    var that = this;
    
    if (!(this instanceof ANALYTICS)) { 
        return new ANALYTICS(options); 
    }

    this.VERSION = VERSION;

    // Merge the default options with the client submitted options
    this.options = Object.assign({
        host: 'https://office.kloudspot.com',
        id: null,
        secretKey: null
    }, options);
    
    //Renew the token every 10 minutes
    var that = this;
    setInterval(function() {
    	that.login(function(resp) {
            //console.log('Logged in with token : '+resp);
        });	
    }, 10*60*1000);
}

ANALYTICS.prototype.ping = function() {
    return "Hello World";
};

/* Login to ANALYTICS and get a Token */
ANALYTICS.prototype.login = function(callback) {
    var that = this;
    process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";
    
    var postData = {
    		id: this.options.id,
    		secretKey: this.options.secretKey
	};
    
    //console.log('Logging in to '+that.options.host+URL.LOGIN);
    var options = {
        url: this.options.host+URL.LOGIN,
        method: 'POST',
        body: postData,
        json: true,
        headers : {
        	'Accept': '*/*',
        	'Content-Type': 'application/json'
        }
    };

    if(callback) {
    	//console.log('callback defined.. logging in..');
	    request(options, function(error, response, body) {
	    	//console.log(body);
	        that.AUTH_TOKEN = body;
	        //console.log('Token generated: '+that.AUTH_TOKEN);
	        if(callback) {
	            return callback({
	                'token': that.AUTH_TOKEN
	            });
	        }
	    });
    } else {
    	//console.log('callback NOT defined.. logging in..');
    	return new Promise(function (resolve, reject) {
		    request(options, function(error, response, body) {
		    	//console.log(body);
		        that.AUTH_TOKEN = body;
		        //console.log('Token generated: '+that.AUTH_TOKEN);
		        resolve({
	                'token': that.AUTH_TOKEN
	            });
		    });
	    });
    }
};

/* Generic postRequest method for all POST requests */
ANALYTICS.prototype._postRequest = function(url, postData, callback) {
    var that = this;
    if(this.AUTH_TOKEN) {
        var options = {
            url: that.options.host+url,
            body: JSON.stringify(postData),
            method: 'POST',
            headers : {
            	'Authorization' : 'Bearer '+that.AUTH_TOKEN,
            	'Accept': '*/*',
            	'Content-Type': 'application/json'
            }
        };
        request(options, function(error, response, body) {
            var bodyJSON = JSON.parse(body);
            if(callback) {
                callback(bodyJSON);
            }
        });    
    } else {
        that.login(function() {        	
        	//console.log('Sending request to '+that.options.host+url);
            var options = {
                url: that.options.host+url,
                body: JSON.stringify(postData),
                method: 'POST',
                headers : {
                	'Authorization' : 'Bearer '+that.AUTH_TOKEN,
                	'Accept': '*/*',
                	'Content-Type': 'application/json'
                }
            };
            request(options, function(error, response, body) {
            	var bodyJSON = JSON.parse(body);
                if(callback) {
                    callback(bodyJSON);
                }
            });   
        });
    }    
};

/* Generic getRequest method for all GET requests */
ANALYTICS.prototype._getRequest = function(url, callback) {
    var that = this;
    if(this.AUTH_TOKEN) {
    	if(!callback) {
    		//console.log('Returning a promise (1)');
        	return new Promise(function (resolve, reject) {
        		
        		//console.log('Sending request to '+that.options.host+url);
        		var options = {
    	            url: that.options.host+url,
    	            method: 'GET',
    	            headers : {
    	            	'Authorization' : 'Bearer '+that.AUTH_TOKEN,
    	            	'Accept': '*/*',
    	            	'Content-Type': 'application/json'
    	            }
    	        };
    	        request(options, function(error, response, body) {
    	        	var bodyJSON = null;
                	try {
                		bodyJSON = JSON.parse(body);
                	} catch(e) {};
    	            resolve(bodyJSON);
    	        });
        	});
    	} else {
    		var options = {
	            url: that.options.host+url,
	            method: 'GET',
	            headers : {
	            	'Authorization' : 'Bearer '+that.AUTH_TOKEN,
	            	'Accept': '*/*',
	            	'Content-Type': 'application/json'
	            }
	        };
	        request(options, function(error, response, body) {
	        	var bodyJSON = null;
            	try {
            		bodyJSON = JSON.parse(body);
            	} catch(e) {};
	            if(callback) {
	                callback(bodyJSON);
	            }
	        });
    	}
         
    } else {
    	if(!callback) {
    		//console.log('Returning a promise (2)');
        	return new Promise(function (resolve, reject) {
        		
		        that.login(function() {      	
		        	//console.log('Sending request to '+that.options.host+url+ ' using token '+that.AUTH_TOKEN);
		            var options = {
		                url: that.options.host+url,
		                method: 'GET',
		                headers : {
		                	'Authorization' : 'Bearer '+that.AUTH_TOKEN,
		                	'Accept': '*/*',
		                	'Content-Type': 'application/json'
		                }
		            };            
            		request(options, function(error, response, body) {
                    	var bodyJSON = null;
                    	try {
                    		bodyJSON = JSON.parse(body);
                    	} catch(e) {};
                    	
                    	resolve(bodyJSON);
                    });
            	});
            });            
        } else {
        	that.login(function() {      	
	        	//console.log('Sending request to '+that.options.host+url+ ' using token '+that.AUTH_TOKEN);
	            var options = {
	                url: that.options.host+url,
	                method: 'GET',
	                headers : {
	                	'Authorization' : 'Bearer '+that.AUTH_TOKEN,
	                	'Accept': '*/*',
	                	'Content-Type': 'application/json'
	                }
	            };            
        		request(options, function(error, response, body) {
                	var bodyJSON = null;
                	try {
                		bodyJSON = JSON.parse(body);
                	} catch(e) {};
                	
                	callback(bodyJSON);
                });
        	});
        }
    }    
};

ANALYTICS.prototype._getImage = function(url, callback) {
    var that = this;
    if(this.AUTH_TOKEN) {
    	if(!callback) {
    		//console.log('Returning a promise (1)');
        	return new Promise(function (resolve, reject) {
        		
        		//console.log('Sending request to '+that.options.host+url);
        		var options = {
    	            url: that.options.host+url,
    	            method: 'GET',
    	            headers : {
    	            	'Authorization' : 'Bearer '+that.AUTH_TOKEN,
    	            	'Accept': '*/*'
    	            },
					encoding: null
    	        };

    	        request(options, function(error, response, body) {
					if(response.headers["content-type"]=="application/json") {
						reject(null);
					} else {
						let data = "data:" + response.headers["content-type"] + ";base64," + Buffer.from(body).toString('base64');
						resolve(data);
					}
    	        });
        	});
    	} else {
    		var options = {
	            url: that.options.host+url,
	            method: 'GET',
	            headers : {
	            	'Authorization' : 'Bearer '+that.AUTH_TOKEN,
	            	'Accept': '*/*'
	            },
	            encoding: null
	        };
	        request(options, function(error, response, body) {
	        	if(response.headers["content-type"]=="application/json") {
					reject(null);
				} else {
		        	let data = "data:" + response.headers["content-type"] + ";base64," + Buffer.from(body).toString('base64');
		            callback(data);
	            }
	        });
    	}
         
    } else {
    	if(!callback) {
    		//console.log('Returning a promise (2)');
        	return new Promise(function (resolve, reject) {
        		
		        that.login(function() {      	
		        	//console.log('Sending request to '+that.options.host+url+ ' using token '+that.AUTH_TOKEN);
		            var options = {
		                url: that.options.host+url,
		                method: 'GET',
		                headers : {
		                	'Authorization' : 'Bearer '+that.AUTH_TOKEN,
		                	'Accept': '*/*'
		                },
		                encoding: null
		            };            
            		request(options, function(error, response, body) {
            			if(response.headers["content-type"]=="application/json") {
							reject(null);
						} else {
	            			let data = "data:" + response.headers["content-type"] + ";base64," + Buffer.from(body).toString('base64');
	                    	resolve(data);
                    	}
                    });
            	});
            });            
        } else {
        	that.login(function() {      	
	        	//console.log('Sending request to '+that.options.host+url+ ' using token '+that.AUTH_TOKEN);
	            var options = {
	                url: that.options.host+url,
	                method: 'GET',
	                headers : {
	                	'Authorization' : 'Bearer '+that.AUTH_TOKEN,
	                	'Accept': '*/*'
	                },
	                encoding: null
	            };            
        		request(options, function(error, response, body) {
        			if(response.headers["content-type"]=="application/json") {
						reject(null);
					} else {
	        			let data = "data:" + response.headers["content-type"] + ";base64," + Buffer.from(body).toString('base64');
	                	callback(data);
                	}
                });
        	});
        }
    }    
};

ANALYTICS.prototype.sites = function(callback) {
    var that = this;
    return that._getRequest(URL.SITES, callback);
};

ANALYTICS.prototype.hierarchy = function(callback) {
    var that = this;
    return that._getRequest(URL.HIERARCHY, callback);
};

ANALYTICS.prototype.locate = function(macAddress, callback) {
    var that = this;
    return that._getRequest(URL.LOCATE+'?macAddress='+macAddress.toUpperCase(), callback);
};

ANALYTICS.prototype.search = function(searchStr, callback) {
    var that = this;
    var searchurl = URL.SEARCH+'?keyword='+searchStr.toLowerCase();
    return that._getRequest(searchurl, callback);
};

ANALYTICS.prototype.find = function(searchStr, callback) {
    var that = this;
    var searchurl = URL.FIND+'&searchMacWithValue='+searchStr.toLowerCase() +
    							'&start='+moment().subtract(7, 'days').valueOf() +
    							'&finish='+moment().valueOf();
    return that._getRequest(searchurl, callback);
};

ANALYTICS.prototype.apstatus = function(callback) {
    var that = this;
    return that._getRequest(URL.APSTATUS, callback);
};

ANALYTICS.prototype.footfall = function(locationid, callback) {
    var that = this;
    return that._getRequest(URL.DISTRIBUTION+'?attributes=associated&attributes=probing&attributes=randomized&distributionTiming=minutes&distributionType=clients&period=12&query=trafficDistribution&locations='+locationid, callback);
};

ANALYTICS.prototype.dwelltime = function(locationid, callback) {
    var that = this;
    return that._getRequest(URL.DISTRIBUTION+'?attributes=all&distributionTiming=daily&distributionType=dwells&finish='+moment().endOf('day').valueOf()+'&query=dwellTimes2&start='+moment().subtract(2, 'days').startOf('day').valueOf()+'&locations='+locationid, callback);
};

ANALYTICS.prototype.hierarchy.sites = function(callback) {
    var that = this;
    return that._getRequest(URL.SITES, callback);
};

module.exports = ANALYTICS;
